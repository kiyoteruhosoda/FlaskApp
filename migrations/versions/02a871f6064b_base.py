"""base

Revision ID: 02a871f6064b
Revises: 
Create Date: 2025-08-20 17:14:19.001722

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '02a871f6064b'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('google_account',
    sa.Column('id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), autoincrement=True, nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('scopes', sa.Text(), nullable=False),
    sa.Column('last_synced_at', sa.DateTime(), nullable=True),
    sa.Column('oauth_token_json', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('job_sync',
    sa.Column('id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), autoincrement=True, nullable=False),
    sa.Column('target', sa.String(length=50), nullable=False),
    sa.Column('account_id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=False),
    sa.Column('finished_at', sa.DateTime(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('stats_json', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('log',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('level', sa.String(length=50), nullable=False),
    sa.Column('event', sa.String(length=50), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('trace', sa.Text(), nullable=True),
    sa.Column('path', sa.String(length=255), nullable=True),
    sa.Column('request_id', sa.String(length=36), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('permission',
    sa.Column('id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), autoincrement=True, nullable=False),
    sa.Column('code', sa.String(length=120), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code')
    )
    op.create_table('photo_metadata',
    sa.Column('id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), autoincrement=True, nullable=False),
    sa.Column('focal_length', sa.Float(), nullable=True),
    sa.Column('aperture_f_number', sa.Float(), nullable=True),
    sa.Column('iso_equivalent', sa.Integer(), nullable=True),
    sa.Column('exposure_time', sa.String(length=32), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('role',
    sa.Column('id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=80), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('user',
    sa.Column('id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), autoincrement=True, nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('totp_secret', sa.String(length=32), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_email'), ['email'], unique=True)

    op.create_table('video_metadata',
    sa.Column('id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), autoincrement=True, nullable=False),
    sa.Column('fps', sa.Float(), nullable=True),
    sa.Column('processing_status', sa.Enum('UNSPECIFIED', 'PROCESSING', 'READY', 'FAILED', name='video_processing_status'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('media',
    sa.Column('id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), autoincrement=True, nullable=False),
    sa.Column('google_media_id', sa.String(length=255), nullable=False),
    sa.Column('account_id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=False),
    sa.Column('local_rel_path', sa.String(length=255), nullable=True),
    sa.Column('hash_sha256', sa.CHAR(length=64), nullable=True),
    sa.Column('bytes', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=True),
    sa.Column('mime_type', sa.String(length=255), nullable=True),
    sa.Column('width', sa.Integer(), nullable=True),
    sa.Column('height', sa.Integer(), nullable=True),
    sa.Column('duration_ms', sa.Integer(), nullable=True),
    sa.Column('shot_at', sa.DateTime(), nullable=True),
    sa.Column('imported_at', sa.DateTime(), nullable=True),
    sa.Column('orientation', sa.Integer(), nullable=True),
    sa.Column('is_video', sa.Boolean(), nullable=True),
    sa.Column('live_group_id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('has_playback', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['account_id'], ['google_account.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('media_item',
    sa.Column('id', sa.String(length=255), nullable=False),
    sa.Column('type', sa.Enum('TYPE_UNSPECIFIED', 'PHOTO', 'VIDEO', name='media_item_type'), nullable=False),
    sa.Column('mime_type', sa.String(length=255), nullable=True),
    sa.Column('filename', sa.String(length=255), nullable=True),
    sa.Column('width', sa.Integer(), nullable=True),
    sa.Column('height', sa.Integer(), nullable=True),
    sa.Column('camera_make', sa.String(length=255), nullable=True),
    sa.Column('camera_model', sa.String(length=255), nullable=True),
    sa.Column('photo_metadata_id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=True),
    sa.Column('video_metadata_id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['photo_metadata_id'], ['photo_metadata.id'], ),
    sa.ForeignKeyConstraint(['video_metadata_id'], ['video_metadata.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('picker_session',
    sa.Column('id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), autoincrement=True, nullable=False),
    sa.Column('account_id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=False),
    sa.Column('session_id', sa.String(length=255), nullable=True),
    sa.Column('picker_uri', sa.Text(), nullable=True),
    sa.Column('expire_time', sa.DateTime(), nullable=True),
    sa.Column('polling_config_json', sa.Text(), nullable=True),
    sa.Column('picking_config_json', sa.Text(), nullable=True),
    sa.Column('media_items_set', sa.Boolean(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('selected_count', sa.Integer(), nullable=True),
    sa.Column('stats_json', sa.Text(), nullable=True),
    sa.Column('last_polled_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['account_id'], ['google_account.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('session_id')
    )
    op.create_table('role_permissions',
    sa.Column('role_id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=False),
    sa.Column('perm_id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=False),
    sa.ForeignKeyConstraint(['perm_id'], ['permission.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
    sa.PrimaryKeyConstraint('role_id', 'perm_id')
    )
    op.create_table('tag',
    sa.Column('id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('attr', sa.Enum('person', 'place', 'thing', name='tag_attr'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('created_by', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_roles',
    sa.Column('user_id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=False),
    sa.Column('role_id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'role_id')
    )
    op.create_table('album',
    sa.Column('id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('cover_media_id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=True),
    sa.Column('visibility', sa.Enum('public', 'private', 'unlisted', name='album_visibility'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['cover_media_id'], ['media.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('exif',
    sa.Column('media_id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=False),
    sa.Column('camera_make', sa.String(length=255), nullable=True),
    sa.Column('camera_model', sa.String(length=255), nullable=True),
    sa.Column('lens', sa.String(length=255), nullable=True),
    sa.Column('iso', sa.Integer(), nullable=True),
    sa.Column('shutter', sa.String(length=32), nullable=True),
    sa.Column('f_number', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('focal_len', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('gps_lat', sa.Numeric(precision=10, scale=7), nullable=True),
    sa.Column('gps_lng', sa.Numeric(precision=10, scale=7), nullable=True),
    sa.Column('raw_json', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['media_id'], ['media.id'], ),
    sa.PrimaryKeyConstraint('media_id')
    )
    op.create_table('media_playback',
    sa.Column('id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), autoincrement=True, nullable=False),
    sa.Column('media_id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=False),
    sa.Column('preset', sa.Enum('original', 'preview', 'mobile', 'std1080p', name='media_playback_preset'), nullable=False),
    sa.Column('rel_path', sa.String(length=255), nullable=True),
    sa.Column('width', sa.Integer(), nullable=True),
    sa.Column('height', sa.Integer(), nullable=True),
    sa.Column('v_codec', sa.String(length=32), nullable=True),
    sa.Column('a_codec', sa.String(length=32), nullable=True),
    sa.Column('v_bitrate_kbps', sa.Integer(), nullable=True),
    sa.Column('duration_ms', sa.Integer(), nullable=True),
    sa.Column('poster_rel_path', sa.String(length=255), nullable=True),
    sa.Column('hash_sha256', sa.CHAR(length=64), nullable=True),
    sa.Column('status', sa.Enum('pending', 'processing', 'done', 'error', name='media_playback_status'), nullable=False),
    sa.Column('error_msg', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['media_id'], ['media.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('media_sidecar',
    sa.Column('id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), autoincrement=True, nullable=False),
    sa.Column('media_id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=False),
    sa.Column('type', sa.Enum('video', 'audio', 'subtitle', name='media_sidecar_type'), nullable=False),
    sa.Column('rel_path', sa.String(length=255), nullable=True),
    sa.Column('bytes', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=True),
    sa.ForeignKeyConstraint(['media_id'], ['media.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('media_tag',
    sa.Column('media_id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=False),
    sa.Column('tag_id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=False),
    sa.ForeignKeyConstraint(['media_id'], ['media.id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tag.id'], ),
    sa.PrimaryKeyConstraint('media_id', 'tag_id')
    )
    op.create_table('picked_media_item',
    sa.Column('id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), autoincrement=True, nullable=False),
    sa.Column('picker_session_id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=False),
    sa.Column('media_item_id', sa.String(length=255), nullable=False),
    sa.Column('status', sa.Enum('pending', 'imported', 'dup', 'failed', 'expired', 'skipped', name='picked_media_item_status'), server_default='pending', nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('enqueued_at', sa.DateTime(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('finished_at', sa.DateTime(), nullable=True),
    sa.Column('attempts', sa.Integer(), nullable=False, server_default='0'),
    sa.Column('base_url_fetched_at', sa.DateTime(), nullable=True),
    sa.Column('base_url_valid_until', sa.DateTime(), nullable=True),

    sa.ForeignKeyConstraint(['media_item_id'], ['media_item.id'], ),
    sa.ForeignKeyConstraint(['picker_session_id'], ['picker_session.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('picker_session_id', 'media_item_id', name='uq_picked_media_item_session_media')
    )
    op.create_table('album_item',
    sa.Column('album_id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=False),
    sa.Column('media_id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=False),
    sa.Column('sort_index', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=True),
    sa.ForeignKeyConstraint(['album_id'], ['album.id'], ),
    sa.ForeignKeyConstraint(['media_id'], ['media.id'], ),
    sa.PrimaryKeyConstraint('album_id', 'media_id')
    )
    op.create_table('picker_import_task',
    sa.Column('id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), autoincrement=True, nullable=False),
    sa.Column('picker_session_id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=False),
    sa.Column('picked_media_item_id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=False),
    sa.Column('status', sa.Enum('pending', 'enqueued', 'running', 'imported', 'dup', 'failed', 'expired', 'skipped', name='picked_media_item_status'), server_default='pending', nullable=False),
    sa.Column('attempt_count', sa.Integer(), server_default='0', nullable=False),
    sa.Column('last_error_code', sa.String(length=100), nullable=True),
    sa.Column('last_error_message', sa.Text(), nullable=True),
    sa.Column('base_url_snapshot', sa.Text(), nullable=True),
    sa.Column('cursor', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['picked_media_item_id'], ['picked_media_item.id'], ),
    sa.ForeignKeyConstraint(['picker_session_id'], ['picker_session.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('picker_session_id', 'picked_media_item_id', name='uk_task_session_item')
    )
    with op.batch_alter_table('picker_import_task', schema=None) as batch_op:
        batch_op.create_index('idx_task_session_status', ['picker_session_id', 'status'], unique=False)

    # ### end Alembic commands ###
    op.execute("INSERT INTO role (id, name) VALUES (1, 'admin'), (2, 'manager'), (3, 'member')")
    op.execute(
        "INSERT INTO permission (id, code) VALUES " \
        "(1, 'admin:photo-settings'), (2, 'admin:job-settings'), (3, 'user:manage'), (4, 'album:create'), (5, 'album:edit'), " \
        "(6, 'album:view'), (7, 'media:view'), (8, 'permission:manage'), (9, 'role:manage'), (10, 'system:manage')")
    op.execute(
        "INSERT INTO role_permissions (role_id, perm_id) VALUES " \
        "(1, 1), (1, 2), (1, 3), (1, 4), (1, 5)," \
        "(1, 6), (1, 7), (2, 1), (2, 4), (2, 5), (2, 6), (2, 7), (3, 6), (3, 7)")
    op.execute("INSERT INTO user (id, email,  password_hash,created_at) VALUES (1, 'admin@example.com', 'scrypt:32768:8:1$7oTcIUdekNLXGSXC$fd0f3320bde4570c7e1ea9d9d289aeb916db7a50fb62489a7e89d99c6cc576813506fd99f50904101c1eb85ff925f8dc879df5ded781ef2613224d702938c9c8', NOW())")
    op.execute("INSERT INTO user_roles (user_id, role_id) VALUES (1, 1)")


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('picker_import_task', schema=None) as batch_op:
        batch_op.drop_index('idx_task_session_status')

    op.drop_table('picker_import_task')
    op.drop_table('album_item')
    op.drop_table('picked_media_item')
    op.drop_table('media_tag')
    op.drop_table('media_sidecar')
    op.drop_table('media_playback')
    op.drop_table('exif')
    op.drop_table('album')
    op.drop_table('user_roles')
    op.drop_table('tag')
    op.drop_table('role_permissions')
    op.drop_table('picker_session')
    op.drop_table('media_item')
    op.drop_table('media')
    op.drop_table('video_metadata')
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_email'))

    op.drop_table('user')
    op.drop_table('role')
    op.drop_table('photo_metadata')
    op.drop_table('permission')
    op.drop_table('log')
    op.drop_table('job_sync')
    op.drop_table('google_account')
    # ### end Alembic commands ###
